# Generated by Django 5.2.6 on 2025-09-08 10:10

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('influencer', 'Influencer/Brand Owner'), ('admin', 'Admin')], default='influencer', help_text='User role in the platform', max_length=20)),
                ('organization', models.CharField(blank=True, help_text='Organization or company name', max_length=200, null=True)),
                ('instagram_handle', models.CharField(blank=True, help_text='Instagram username without @', max_length=100, null=True)),
                ('twitter_handle', models.CharField(blank=True, help_text='Twitter username without @', max_length=100, null=True)),
                ('youtube_channel', models.URLField(blank=True, help_text='YouTube channel URL', null=True)),
                ('website', models.URLField(blank=True, help_text='Personal or company website', null=True)),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=20, null=True)),
                ('bio', models.TextField(blank=True, help_text='Short bio or description', max_length=500, null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to='profile_pictures/')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the user account is verified')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='APIUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.CharField(max_length=100)),
                ('method', models.CharField(max_length=10)),
                ('status_code', models.IntegerField()),
                ('response_time_ms', models.IntegerField()),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_usage_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='api_apiusag_user_id_e99861_idx'), models.Index(fields=['endpoint', '-created_at'], name='api_apiusag_endpoin_d2bd6a_idx')],
            },
        ),
        migrations.CreateModel(
            name='ModerationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_type', models.CharField(choices=[('text', 'Text Content'), ('image', 'Image File'), ('url', 'URL/Link')], help_text='Type of content submitted for moderation', max_length=10)),
                ('input_value', models.TextField(help_text='The actual content (text, URL, or file path)')),
                ('input_file', models.FileField(blank=True, help_text='Uploaded file for image moderation', null=True, upload_to='moderation_uploads/')),
                ('result', models.CharField(choices=[('safe', 'Safe Content'), ('unsafe', 'Unsafe Content'), ('pending', 'Pending Review'), ('error', 'Processing Error')], default='pending', help_text='Moderation result', max_length=10)),
                ('risk_level', models.CharField(blank=True, choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], help_text='Risk level assessment', max_length=10, null=True)),
                ('confidence_score', models.FloatField(blank=True, help_text='AI confidence score (0.0 to 1.0)', null=True)),
                ('flags_detected', models.JSONField(blank=True, default=list, help_text='List of specific issues detected')),
                ('processing_time_ms', models.IntegerField(blank=True, help_text='Processing time in milliseconds', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the request', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string from request', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes or context', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='User who submitted the content for moderation', on_delete=django.db.models.deletion.CASCADE, related_name='moderation_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='api_moderat_user_id_4b6de0_idx'), models.Index(fields=['result', '-created_at'], name='api_moderat_result_265f39_idx'), models.Index(fields=['input_type', '-created_at'], name='api_moderat_input_t_50c299_idx')],
            },
        ),
    ]
